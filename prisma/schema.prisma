generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts         Account[]
  Session          Session[]
  Income           Income[]
  Expense          Expense[]
  userMonthlyLimit UserMonthlyLimit[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Income {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String
  value       Float
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  incomeTagId String    @db.ObjectId
  paid        Boolean   @default(false)
  IncomeTag   IncomeTag @relation(fields: [incomeTagId], references: [id])
  User        User      @relation(fields: [userId], references: [id])
}

model IncomeTag {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  icon         String
  monthlyLimit Float?
  Income       Income[]
}

model Expense {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  description  String
  value        Float
  date         DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String     @db.ObjectId
  expenseTagId String     @db.ObjectId
  paid         Boolean    @default(false)
  ExpenseTag   ExpenseTag @relation(fields: [expenseTagId], references: [id])
  User         User       @relation(fields: [userId], references: [id])
}

model ExpenseTag {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  icon             String
  monthlyLimit     Float?
  Expense          Expense[]
  UserMonthlyLimit UserMonthlyLimit[]
}

model UserMonthlyLimit {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  monthlyLimit Float
  expenseTagId String     @db.ObjectId
  userId       String     @db.ObjectId
  User         User       @relation(fields: [userId], references: [id])
  ExpenseTag   ExpenseTag @relation(fields: [expenseTagId], references: [id])
}
